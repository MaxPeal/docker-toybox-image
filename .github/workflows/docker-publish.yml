name: Build and push image

on:
  push:
  workflow_dispatch:
    inputs:
      clear-docker-cache:
        description: 'clear docker cache with rm -fr /tmp/.buildx-cache /tmp/.buildx-cache-old /tmp/.buildx-cache-new'     
        required: false 
        type: boolean

# https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-secrets
# https://docs.github.com/en/actions/security-guides/automatic-token-authentication
permissions:
  packages: read
  contents: read

jobs:
  build-push:
    runs-on: ubuntu-latest

    strategy:
#      fail-fast: true
      fail-fast: false
      matrix:
        platform-args:
          - "linux/amd64"
#          - "linux/amd64/v2"
#          - "linux/amd64/v3"
#          - "linux/amd64/v4"
          - "linux/arm64"
          - "linux/riscv64"
          - "linux/ppc64le"
          - "linux/s390x"
          - "linux/386"
          - "linux/mips64le"
          - "linux/mips64"
          - "linux/arm/v7"
          - "linux/arm/v6"
          - "linux/arm/v5"
          - "linux/arm/v4"
          #linux/amd64,linux/amd64/v2,linux/amd64/v3,linux/amd64/v4,linux/arm64,linux/riscv64,linux/ppc64le,linux/s390x,linux/386,linux/mips64le,linux/mips64,linux/arm/v7,linux/arm/v6
          #- linux/amd64,linux/amd64/v2,linux/amd64/v3,linux/amd64/v4,linux/arm64,linux/riscv64,linux/ppc64le,linux/s390x,linux/386,linux/mips64le,linux/mips64,linux/arm/v7,linux/arm/v6
          #- "linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/ppc64le,linux/s390x,linux/riscv64"
        matrixjobname: 
          - "build1"
        #host-os:
          #- ubuntu-18.04
          #- ubuntu-20.04
        #host-os: [ubuntu-16.04, ubuntu-18.04, ubuntu-20.04, ubuntu-22.04, ubuntu-latest, windows-2016, windows-2019, windows-2022, macos-10.15, macos-11, macos-12]
        #host-os: [ubuntu-18.04, ubuntu-20.04, ubuntu-22.04, ubuntu-latest, windows-2016, windows-2019, windows-2022, macos-10.15, macos-11, macos-12]
        host-os: [ubuntu-20.04]
        release:
          - false
        tag-args:
          - "null"
        tag-latest: [FALSE]
        tag-sha: [FALSE]
        tag-args-enable: [FALSE]
        tag-args-disable: [TRUE]
        # tag-args-enable: 
        #  - false
        experimental: [true]
        build-args:
          - "BASE_IMAGE="
          #- "BASE_IMAGE=ubuntu:20.04"
          #- "BASE_IMAGE=debian:11.2-slim"
        #"BASE_IMAGE=alpine:edge"
        #"BASE_IMAGE=localhost:5000/my-project/base"
        include:
#          #- platform-args: "linux/amd64,linux/arm64,linux/arm/v7"
#          - platform-args: "linux/amd64"
#            #host-os: [ubuntu-16.04, ubuntu-18.04, ubuntu-20.04, ubuntu-latest, windows-2016, windows-2019, windows-2022, macos-10.15, macos-11, macos-12]
#            host-os: ubuntu-22.04
#            #host-os: ubuntu-latest
#            tag-args: hostos-test-
#            tag-latest: false
#            tag-sha: false
#            tag-args-enable: true
#            tag-args-disable: false
#            #build-args: 'BASE_IMAGE=ubuntu:20.04'
#            build-args: 'BASE_IMAGE=ubuntu:22.04'
#            #release: false
#            #release: ${{ github.event_name != 'pull_request' }} # importent to catch a rogue like PR
#            release: true
#            experimental: true
          #- platform-args: linux/riscv64
          #- platform-args: "linux/amd64,linux/arm/v5,linux/arm/v7,linux/arm64,linux/386,linux/mips64le,linux/ppc64le,linux/riscv64,linux/s390x"
#          - platform-args: "linux/amd64"
#            #host-os: ubuntu-latest
#            host-os: ubuntu-20.04
#            tag-args: debian-unstable-
#            tag-latest: false
#            tag-sha: false
#            tag-args-enable: true
#            tag-args-disable: false
#            #build-args: 'BASE_IMAGE=debian:unstable-20220527-slim'
#            build-args: 'BASE_IMAGE=debian:unstable-slim'
#            #release: ${{ github.event_name != 'pull_request' }} # importent to catch a rogue like PR
#            release: false
#            experimental: true
          #- platform-args: "linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/ppc64le,linux/s390x,linux/riscv64"
          # no linux/mips64 support
          #- platform-args: "linux/amd64,linux/arm/v5,linux/arm/v7,linux/arm64,linux/386,linux/mips64le,linux/ppc64le,linux/s390x"
#          - platform-args: "linux/amd64"
#            host-os: ubuntu-latest
#            tag-args: debian-
#            tag-latest: false
#            tag-sha: false
#            tag-args-enable: true
#            tag-args-disable: false
#            build-args: 'BASE_IMAGE=debian:11.2-slim'
#            #release: true
#            #release: ${{ github.event_name != 'pull_request' }} # importent to catch a rogue like PR
#            release: true
#            experimental: true
          #- platform-args: "linux/386,linux/amd64,linux/arm/v5,linux/arm/v6,linux/arm/v7,linux/arm64,linux/mips64le,linux/riscv64,linux/ppc64le,linux/s390x"
          #- platform-args: "linux/386,linux/amd64,linux/arm/v5,linux/arm/v6,linux/arm/v7,linux/arm64,linux/ppc64le,linux/s390x"
          #- platform-args: "linux/386,linux/amd64,linux/arm/v5,linux/arm/v6,linux/arm/v7,linux/arm64,linux/mips64le,linux/ppc64le,linux/s390x"
          #- platform-args: "linux/386,linux/amd64,linux/arm/v5,linux/arm/v6,linux/arm/v7,linux/arm64,linux/mips64le,linux/riscv64,linux/ppc64le,linux/s390x"
          - platform-args: "linux/386,linux/amd64,linux/arm/v4,linux/arm/v5,linux/arm/v6,linux/arm/v7,linux/arm64,linux/mips64le,linux/riscv64,linux/ppc64le,linux/s390x"
          #- platform-args: "linux/amd64,linux/arm/v7,linux/arm64,linux/ppc64le,linux/riscv64,linux/s390x"
          #- platform-args: "linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/ppc64le,linux/s390x,linux/riscv64"
          #- platform-args: "linux/amd64"
            host-os: ubuntu-20.04
            tag-args: ''
            tag-latest: true
            tag-sha: false
            tag-args-enable: false
            tag-args-disable: false
            #build-args: 'BASE_IMAGE=ubuntu:20.04'
            build-args: 'BASE_IMAGE='
            #release: false
            #release: ${{ github.event_name != 'pull_request' }} # importent to catch a rogue like PR
            release: true
            experimental: true
    permissions:
      packages: write
      contents: read

    steps:
      - uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}

      - name: Cut "docker-" form github.repository and convert to lowercase # use with ${{ steps.cut.outputs.repo }}
        id: cut
        run: echo "::set-output name=repo::$(echo "${{ github.repository }}" | tr '[A-Z]' '[a-z]' | sed -e 's/\/docker-/\//')"
        shell: bash

      - name: docker/metadata-action
        uses: docker/metadata-action@v4.0.1
        # continue-on-error: true
        id: meta
        with:
          images: |
            name=ghcr.io/${{ steps.cut.outputs.repo }}
            name=${{ steps.cut.outputs.repo }}
          #flavor: |
          #  latest=${{ matrix.tag-latest }}
          #  ${{ matrix.tag-args }}
          flavor: |
            latest=${{ matrix.tag-latest }}
            prefix=${{ matrix.tag-args }}
            suffix=
          # latest=<auto|true|false>: Handle latest tag (default auto)
          # prefix=<string>,onlatest=<true|false>: A global prefix for each generated tag and optionally for latest
          # suffix=<string>,onlatest=<true|false>: A global suffix for each generated tag and optionally for latest
          tags: |
            type=schedule,pattern=nightly
            # handlebars
            type=schedule,pattern={{date 'YYYYMMDD'}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=${{ matrix.tag-args }}sha-,suffix=,format=short,enable=${{ matrix.tag-sha }}

      - name: Login to GitHub
        if: ${{ github.event_name != 'pull_request' }} # importent to catch a rogue like PR
        uses: docker/login-action@v2.0.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        if: ${{ github.event_name != 'pull_request' }} # importent to catch a rogue like PR
        uses: docker/login-action@v2.0.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v3.0.0
        with:
          platforms: ${{ matrix.platform-args }}
          #"linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/ppc64le,linux/s390x,linux/riscv64"
          #linux/amd64,linux/arm/v7,linux/arm64
          #push: ${{ matrix.release }}
          push: ${{ matrix.release && github.event_name != 'pull_request' }} # importent to catch a rogue like PR
          #push: ${{ ( matrix.release && ( github.event_name != 'pull_request' ) ) }} # importent to catch a rogue like PR
          #push: ${{ github.event_name != 'pull_request' }}  # importent to catch a rogue like PR
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          #cache-from: type=local,src=/tmp/.buildx-cache
          cache-from: type=local,src=/tmp/.buildx-cache-old
          #cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
          build-args: ${{ matrix.build-args }}
